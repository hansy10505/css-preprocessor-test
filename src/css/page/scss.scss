// s1. 变量
$variable: #a1aaf8;
section.s1 div{
  height: 50px;
  background-color: $variable;
}

// s2.嵌套
$nest: yellowgreen;
section.s2{
  div {
    height: 50px;
    background-color: $nest;
  }
}

// s3.嵌套调用父选择器
$nest_f: rgb(213, 175, 228);
section.s3{
  div {
    height: 50px;
    background-color: $nest_f;
    &:hover {
      background-color: $nest;
    }
  }
}

// s4.嵌套属性
$nest_attr: orange;
$border_attr: solid $nest;
section.s4{
  div {
    height: 50px;
    background-color: $nest_attr;
    border: {
      top: 1px $border_attr;
      right: 2px $border_attr;
      bottom: 3px $border_attr;
      left: 4px $border_attr;
    }
  }
}

// s5.mixin 混合
@mixin block($bg_color) {
  height: 50px;
  // 默认：可直接调用传参变量
  // 可选：可使用内置mixin计算变量的值，例如：darken变暗， lighten变亮
  background-color: lighten($bg_color, 30%);
}
section.s5{
  div {
    // 默认：调用mixin按顺序传参
    // 可选：变量直接指定参数的值，如 @include block($bg_color:red);
    @include block(red);
  }
}

// s6.extend 继承
$extend: yellowgreen;
.color {
  background-color: darken($extend, 10%);
}
.color a{
  text-decoration: none;
  color: #666666;
}
section.s6{
  div {
    // 继承会同时继承相关选择器的内容
    @extend .color;
    height: 50px;
  }
}

// s7.import 引入
// 可以省略_前缀和后缀名
@import "../common/scss/base";

// s8.注释

    // 1. 单行注释，标准编译和压缩编译后不会保留

    /* 2. 多行注释
    * 标准编译后会保留注释
    * 压缩编译后不会保留 */

    /*!
    * 3. 强制保留注释
    * 标准编译后会保留注释
    * 即使压缩也会保留，使用与版权声明
    */

 // s9.Data Type 数据类型及函数

   /*! 数据类型
    * 5 / 5px / (8/2)           => number  =>  10px - 5 = 15px // (10px / 2) = 5px
    * center / left             => string  =>  "str" + ing = "string" / str - ing = "str-ing" / 不能使用字符串除号
    * 1px solid red / 5px 10px  => list    =>  逗号和空格分割开的数组
    * (k1:v1, k2:v2)            => map     =>  键值对之间用逗号分割
    * true/false                => boolean =>  (5px > 3px) and (5px < 10px) / or / not
    * red / #xxxxxx / rgb / rgba / hsl(色相、饱和度、明度)  => color
    */

   /*! number函数
    * abs()    取绝对值
    * round()  取四舍五入的值
    * ceil()   小数进位
    * floor()  去掉小数
    * percentage(100px / 1000px) 转换成百分比 
    * min(1,2) 取最小值
    * max(1,2) 取最大值
    */

   /*! string函数
    * to-upper-case()     字符串转大写
    * to-lower-case()     字符串转小写
    * str-length()        获取字符串长度
    * str-index(str, str) 获取第二个字符串在第一个字符串中所在的位置
    * str-insert(str, str, index) 将第二个字符串插入第一个字符串index位置处
    */

   /*! color函数
    * adjust-hue(color, 90deg)   调整色相
    * darken(color，明度)         降低明度
    * lighten(color，明度)        提高明度
    * saturate(color, 饱和度)     提高饱和度  
    * desaturate(color, 饱和度)   降低饱和度  
    * opacify(color, 0.3)        提高不透明度/降低透明度  
    * transparentize(color, 0.1) 降低不透明度/提高透明度
    */

   /*! list函数
    * length(list)      获取列表元素个数，index从1开始
    * nth(list, index)  获取第index个元素
    * index(list, ele)  获取ele在list中的位置
    * append(list, ele) 将ele插入到list末尾
    * join(list, list, comma/space)   合并两个list，默认第三个参数为space用空格分割，设置comma则用逗号分割
    */

   /*! map函数
    * length(map)              获取map元素个数，index从1开始
    * map-get(map, key)        根据key获取value
    * map-keys(map)            获取map所有key
    * map-values(map)          获取map所有value
    * map-has-key(map, key)    根据key查找是否存在，返回true/false
    * map-merge(map, map)      合并多个map
    * map-remove(map, key,key) 移除map元素
    */


// 10.Interpolation 插值
$nest: yellowgreen;
$no: "10";
$border-postion: "left";
section.s#{$no} {
  div {
    height: 50px;
    background-color: lighten($nest, 10%);
    border-#{$border-postion}: 3px solid #666666;
  }
}

// 11.@if 选择语句
$if_color: pink;
$use_prefixes: true;
section.s11 {
  div {
    height: 50px;
    background-color: $if_color;
    opacity: 0.9;
    @if $use_prefixes{
      filter:alpha(opacity=90);      /* IE */
      -khtml-opacity:0.9;            /* 老版Safari */
      -moz-opacity:0.9;              /* 老版Mozilla */
    }
  }
}

// 12.@for 有序循环语句 
$if_color: yellow;
$columns: 6;
section.s12 {
  height: 50px;
  background-color: $if_color;
  display: block!important;
  div {
    // [through] 1-6
    @for $i from 1 through $columns{
      .col-through-#{$i} {
        width: 100% / $columns * $i;
      }
    }
    // [to] 1-5
    @for $i from 1 to $columns{
      .col-to-#{$i} {
        width: 100% / $columns * $i;
      }
    }
  }
}

// 13.@each 无序循环语句 
$if_color: rgb(0, 153, 255);
$icons: success info error;
$each_width: 50px;
section.s13 {
  height: 50px;
  background-color: $if_color;
  div{
    @each $icon in $icons{
      .icon-#{$icon} {
        height: $each_width;
        width: $each_width;
        display: inline-block;
        background: url('../img/#{$icon}.png') no-repeat 0 0;
        background-size: $each_width $each_width;
      }
    }
  }
}

// 14.while 条件循环
$while_color: rgb(212, 0, 255);
$item: 6;
section.s14 {
  height: 50px;
  background-color: $while_color;
  div{
    @while $item > 0{
      .item-#{$item} {
        width: 5px * $item;
      }
      $item: $item - 2;
    }
  }
}


// 15.function 自定义函数
$colors: (light:rgb(145, 255, 0), dark:rgb(1, 39, 25));
@function color($key) {
  @return map-get($colors, $key);
}
section.s15 {
  height: 50px;
  background-color: color(light);
}

// 16.错误提示信息
$colors: (light:rgb(0, 255, 157), dark:rgb(1, 39, 25));
@function color($key) {
  @if not map-has-key($colors, $key){
    // [warn] 不会中断，但是会提示
    @warn "不存在#{$key}这个key";
    // [error] 会中断编译操作
    @error "不存在#{$key}这个key";
  }
  @return map-get($colors, $key);
}
section.s16 {
  height: 50px;
  background-color: color(light);
}